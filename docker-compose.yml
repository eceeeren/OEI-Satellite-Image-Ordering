# ===================================
# Docker Compose COnfiguration
# Services:
# - Frontend (Vite)
# - Backend API (Node.js)
# - Database (PostgreSQL/PostGIS)
#
# Guide: 'step-by-step guide on how to set up a simple REST API using Node.js, PostgreSQL, Express, TypeScript, and Docker.'
# Tutorial: https://www.keralait.dev/blogs/76/step-by-step-guide-on-how-to-set-up-a-simple-rest-api-using-
# ===================================

services:
  frontend:
    container_name: oei-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    # Frontend voluma is created for hot-reloading during development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - api
    networks:
      - app-network

  api:
    container_name: oei-backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - PORT=3000
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - DB_HOST=postgres
    depends_on:
      postgres:
        # Postgres health check (Added by Claude)
        condition: service_healthy
    networks:
      - app-network

  postgres:
    container_name: oei-postgres
    image: postgis/postgis:15-3.3
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    healthcheck:
      # Postgres health check (Added by Claude)
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
